#!/usr/bin/env python3
"""Test script cho embedding v√† t√¨m ki·∫øm ti·∫øng Vi·ªát v·ªõi Qdrant."""

import asyncio
import sys
import logging

# Setup logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


async def test_vietnamese_embedding():
    """Test embedding ti·∫øng Vi·ªát v√† l∆∞u tr·ªØ v√†o Qdrant."""
    try:
        # Import modules
        sys.path.insert(0, "src")
        from qdrant_mcp.embedding.pipeline.text_processor import get_embedding_pipeline
        from qdrant_mcp.embedding.schemas import NomicTextInput
        from qdrant_client import QdrantClient
        from qdrant_client.models import PointStruct, VectorParams, Distance
        import uuid
        
        print("üáªüá≥ Test Embedding Ti·∫øng Vi·ªát v·ªõi Qdrant")
        print("=" * 60)
        
        # Initialize
        pipeline = await get_embedding_pipeline()
        client = QdrantClient(host="localhost", port=6333)
        
        # C√°c vƒÉn b·∫£n ti·∫øng Vi·ªát ƒë·ªÉ test
        vietnamese_texts = [
            "Tr√≠ tu·ªá nh√¢n t·∫°o ƒëang thay ƒë·ªïi th·∫ø gi·ªõi c√¥ng ngh·ªá hi·ªán ƒë·∫°i",
            "M√°y h·ªçc v√† x·ª≠ l√Ω ng√¥n ng·ªØ t·ª± nhi√™n gi√∫p m√°y t√≠nh hi·ªÉu ƒë∆∞·ª£c ti·∫øng Vi·ªát",
            "C∆° s·ªü d·ªØ li·ªáu vector cho ph√©p t√¨m ki·∫øm ng·ªØ nghƒ©a r·∫•t hi·ªáu qu·∫£",
            "Python l√† ng√¥n ng·ªØ l·∫≠p tr√¨nh r·∫•t ph·ªï bi·∫øn trong khoa h·ªçc d·ªØ li·ªáu",
            "H·ªá th·ªëng MCP gi√∫p k·∫øt n·ªëi c√°c c√¥ng c·ª• AI m·ªôt c√°ch d·ªÖ d√†ng",
            "Qdrant l√† c∆° s·ªü d·ªØ li·ªáu vector hi·ªáu nƒÉng cao cho AI"
        ]
        
        collection_name = "van_ban_viet"
        
        print(f"‚úì S·ª≠ d·ª•ng collection '{collection_name}'")
        
        # Embed v√† l∆∞u tr·ªØ c√°c vƒÉn b·∫£n ti·∫øng Vi·ªát
        print(f"\nüìù ƒêang embed v√† l∆∞u {len(vietnamese_texts)} vƒÉn b·∫£n ti·∫øng Vi·ªát...")
        
        points = []
        for i, text in enumerate(vietnamese_texts):
            # T·∫°o embedding v·ªõi prompt "document"
            input_data = NomicTextInput(text=text, prompt_name="document")
            result = await pipeline.create_embedding(input_data)
            
            # T·∫°o point v·ªõi UUID
            point = PointStruct(
                id=str(uuid.uuid4()),
                vector=result.embeddings,
                payload={
                    "text": text,
                    "index": i,
                    "language": "vietnamese",
                    "category": "test_data"
                }
            )
            points.append(point)
            print(f"  ‚úì Embedded: {text[:50]}...")
        
        # L∆∞u v√†o Qdrant
        client.upsert(collection_name=collection_name, points=points)
        print(f"‚úÖ ƒê√£ l∆∞u {len(points)} embeddings v√†o collection '{collection_name}'")
        
        # Ki·ªÉm tra collection
        collection_info = client.get_collection(collection_name)
        print(f"üìä Collection info: {collection_info.points_count} points")
        
        # Test t√¨m ki·∫øm v·ªõi c√°c query ti·∫øng Vi·ªát
        queries = [
            "c√¥ng ngh·ªá AI v√† machine learning",
            "ng√¥n ng·ªØ l·∫≠p tr√¨nh cho data science", 
            "t√¨m ki·∫øm vector database",
            "h·ªá th·ªëng k·∫øt n·ªëi c√¥ng c·ª• AI"
        ]
        
        print(f"\nüîç Test t√¨m ki·∫øm v·ªõi {len(queries)} queries ti·∫øng Vi·ªát:")
        
        for query in queries:
            print(f"\nüîé Query: '{query}'")
            
            # T·∫°o embedding cho query
            query_input = NomicTextInput(text=query, prompt_name="query")
            query_result = await pipeline.create_embedding(query_input)
            
            # T√¨m ki·∫øm
            search_result = client.search(
                collection_name=collection_name,
                query_vector=query_result.embeddings,
                limit=3,
                score_threshold=0.1
            )
            
            print(f"  üìã K·∫øt qu·∫£ t√¨m ki·∫øm (top 3):")
            for j, hit in enumerate(search_result):
                print(f"    {j+1}. Score: {hit.score:.3f}")
                print(f"       Text: {hit.payload['text']}")
        
        print(f"\nüéâ Test embedding ti·∫øng Vi·ªát th√†nh c√¥ng!")
        return True
        
    except Exception as e:
        print(f"\n‚ùå Test th·∫•t b·∫°i: {e}")
        import traceback
        traceback.print_exc()
        return False


async def test_semantic_search_vietnamese():
    """Test t√¨m ki·∫øm ng·ªØ nghƒ©a ti·∫øng Vi·ªát n√¢ng cao."""
    try:
        print(f"\nüß† Test T√¨m Ki·∫øm Ng·ªØ Nghƒ©a Ti·∫øng Vi·ªát N√¢ng Cao")
        print("=" * 60)
        
        # Import modules
        sys.path.insert(0, "src")
        from qdrant_mcp.embedding.pipeline.text_processor import get_embedding_pipeline
        from qdrant_mcp.embedding.schemas import NomicTextInput
        from qdrant_client import QdrantClient
        
        pipeline = await get_embedding_pipeline()
        client = QdrantClient(host="localhost", port=6333)
        collection_name = "van_ban_viet"
        
        # Test c√°c query kh√°c nhau v·ªÅ c√πng 1 ch·ªß ƒë·ªÅ
        related_queries = [
            "tr√≠ tu·ªá nh√¢n t·∫°o",
            "AI v√† machine learning", 
            "c√¥ng ngh·ªá th√¥ng minh",
            "h·ªá th·ªëng t·ª± ƒë·ªông h·ªçc"
        ]
        
        print("üîç Test t√¨m ki·∫øm v·ªõi c√°c query t∆∞∆°ng t·ª± v·ªÅ AI:")
        
        for query in related_queries:
            print(f"\nüìù Query: '{query}'")
            
            # Embed query
            query_input = NomicTextInput(text=query, prompt_name="query")
            query_result = await pipeline.create_embedding(query_input)
            
            # Search
            search_result = client.search(
                collection_name=collection_name,
                query_vector=query_result.embeddings,
                limit=2
            )
            
            print(f"  üéØ Top 2 k·∫øt qu·∫£:")
            for i, hit in enumerate(search_result):
                print(f"    {i+1}. Score: {hit.score:.3f} - {hit.payload['text'][:60]}...")
        
        print(f"\n‚úÖ Test t√¨m ki·∫øm ng·ªØ nghƒ©a ho√†n th√†nh!")
        return True
        
    except Exception as e:
        print(f"\n‚ùå Test ng·ªØ nghƒ©a th·∫•t b·∫°i: {e}")
        return False


async def main():
    """Main test runner."""
    print("üöÄ B·∫Øt ƒê·∫ßu Test Pipeline Embedding Ti·∫øng Vi·ªát")
    print("=" * 70)
    
    # Test 1: Basic embedding v√† storage
    success1 = await test_vietnamese_embedding()
    
    # Test 2: Semantic search
    success2 = await test_semantic_search_vietnamese()
    
    # Summary
    print("\n" + "=" * 70)
    if success1 and success2:
        print("üéâ T·∫§T C·∫¢ TEST TI·∫æNG VI·ªÜT ƒê√É TH√ÄNH C√îNG!")
        print("‚úÖ Pipeline embedding ho·∫°t ƒë·ªông t·ªët v·ªõi ti·∫øng Vi·ªát")
        print("‚úÖ T√¨m ki·∫øm ng·ªØ nghƒ©a ti·∫øng Vi·ªát ho√†n h·∫£o")
        return 0
    else:
        print("‚ùå M·ªôt s·ªë test b·ªã l·ªói!")
        return 1


if __name__ == "__main__":
    result = asyncio.run(main())
    sys.exit(result)
